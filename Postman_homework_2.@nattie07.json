{
	"info": {
		"_postman_id": "add8179f-f344-486a-b2fa-26188e2387d7",
		"name": "Postman_homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Second",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить  руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Petya\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(+jsonData.age).to.eql(25);\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req_salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"pm.test(\"Check salary 1_5_year\", function () {\r",
							"    pm.expect(u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Petya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Third",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let dog = jsonData.family.pets.dog\r",
							"\r",
							"pm.test(\"Check dog has name\", function () {\r",
							"    pm.expect(dog.hasOwnProperty(\"name\")).to.eql(true);\r",
							"})\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog has age\", function () {\r",
							"    pm.expect(dog.hasOwnProperty(\"age\")).to.eql(true);\r",
							"})\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check name is Lucky\", function () {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog age is 4\", function () {\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Vasya&age=35&salary=2000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vasya"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fourth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary first year\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary second year\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary third year\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"let salary = jsonData.salary\r",
							"pm.environment.set(\"salary\", salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"salary.forEach(item=>console.log(item))\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=Kolya&age=45&salary=3000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kolya"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fifth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start_qa_salary exist\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"start_qa_salary\")).to.eql(true);\r",
							"})\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check start_qa_salary_after_6_months exist\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_6_months\")).to.eql(true);\r",
							"})\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check start_qa_salary_after_12_months exist\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_12_months\")).to.eql(true);\r",
							"})\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check start_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_1.5_year\")).to.eql(true);\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check start_qa_salary_after_3.5_years exist\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_3.5_years\")).to.eql(true);\r",
							"})\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check respons has property person\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"person\")).to.eql(true);\r",
							"})\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start qa salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check  qa salary after 6 months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check  qa salary after 12 months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check  qa salary after 1.5 year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check  qa salary after 3.5 years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check beginer salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 5 years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (const property in jsonData.person) {\r",
							"    console.log(`${property}: ${jsonData.person[property]}`);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}